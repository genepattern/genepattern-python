"""
GenePattern Module Creator

Tools for converting Python scripts into GenePattern server modules

Compatible with Python 2.7 and Python 3.4+
"""

import os
import string
import zipfile
from enum import Enum
from datetime import datetime

__authors__ = ['Thorin Tabor']
__version__ = '0.1.0'
__status__ = 'Beta'


class Privacy(Enum):
    PRIVATE = "private"
    PUBLIC = "public"


class Quality(Enum):
    DEVELOPMENT = "development"
    PREPRODUCTION = "preproduction"
    PRODUCTION = "production"


class OS(Enum):
    ANY = "any"
    LINUX = "linux"
    MAC = "mac"
    WINDOWS = "windows"


class CPU(Enum):
    ANY = "any"
    ALPHA = "alpha"
    INTEL = "intel"
    POWERPC = "powerpc"
    SPARC = "sparn"


MANIFEST_FILE_NAME = "manifest"


class GPTaskSpec:
    """
    Specification needed to create a new GenePattern module
    """

    def __init__(self, name=None, description="", version_comment="", author="", institution="",
                 categories=[], privacy=Privacy.PRIVATE, quality=Quality.DEVELOPMENT,
                 file_format=[], os=OS.ANY, cpu=CPU.ANY, language="Python",
                 user=None, support_files=[], documentation="", license="",
                 lsid=None, command_line=None, parameters=[]):

        self.name = name
        self.description = description
        self.version_comment = version_comment
        self.author = author
        self.institution = institution

        self.categories = categories
        self.privacy = privacy
        self.quality = quality

        self.file_format = file_format
        self.os = os
        self.cpu = cpu
        self.language = language

        self.user = user
        self.support_files = support_files
        self.documentation = documentation
        self.license = license

        self.lsid = lsid
        self.command_line = command_line
        self.parameters = parameters

    def validate(self):
        # Check all values for None
        for attr in self.__dict__:
            if self.__dict__[attr] is None:
                raise ValueError(attr + " is not set")

        # Validate name
        invalid_chars = set(string.punctuation.replace("_", "").replace(".", ""))
        if any(char in invalid_chars for char in self.name):
            raise ValueError("module name includes invalid characters: " + self.name)

        # Validate LSID
        self._valid_lsid()

        # Validate categories
        if not self._all_strings(self.categories):
            raise TypeError("categories contains non-string value: " + str(self.categories))

        # Validate file formats
        if not self._all_strings(self.file_format):
            raise TypeError("file_format contains non-string value: " + str(self.file_format))

        # Validate support files
        if not self._all_strings(self.support_files):
            raise TypeError("support_files contains non-string value: " + str(self.support_files))

        # Validate parameters
        # TODO: Implement

        # Return that everything validates
        return True

    def create_zip(self, clean=True):
        # First validate the attributes
        self.validate()

        # Check to see if an existing interferes with module creation
        if os.path.exists(MANIFEST_FILE_NAME):
            raise OSError("existing manifest blocks manifest file creation")

        # Write the manifest
        self.write_manifest()

        # Create the zip
        self._zip_files()

        # Clean up the manifest
        if clean:
            os.remove(MANIFEST_FILE_NAME)

    def _zip_files(self):
        # Create the zip file
        zip = zipfile.ZipFile(self.name + '.zip', 'w', zipfile.ZIP_DEFLATED)

        # Add the manifest file to the zip
        zip.write(MANIFEST_FILE_NAME)

        # Add the support files to the zip
        for file in self.support_files:
            zip.write(file)

        # Close the zip file
        zip.close()

    def write_manifest(self, module_directory=""):
        """
        Write a GenePattern manifest file for the module
        :param module_directory: optionally write to subdirectory
        :return:
        """
        # First validate the spec
        self.validate()

        # Open the manifest file for writing
        manifest_file = open(os.path.join(module_directory, "manifest"), "w")

        # Write the header
        manifest_file.write("# " + self.name + "\n")
        manifest_file.write("# " + str(datetime.now()) + "\n")
        manifest_file.write("# Generated by Python Module Creator v" + __version__ + "\n")

        # Write initial attributes
        manifest_file.write("JVMLevel=\n")
        manifest_file.write("LSID=" + self._escape_colons(self.lsid) + "\n")
        manifest_file.write("author=" + self._author_line() + "\n")
        manifest_file.write("categories=" + ';'.join(self.categories) + "\n")
        manifest_file.write("commandLine=" + self.command_line + "\n")
        manifest_file.write("cpuType=" + str(self.cpu.value) + "\n")
        manifest_file.write("description=" + self.description + "\n")
        manifest_file.write("fileFormat=" + ';'.join(self.file_format) + "\n")
        manifest_file.write("language=" + self.language + "\n")
        manifest_file.write("license=" + self.license + "\n")
        manifest_file.write("name=" + self.name + "\n")
        manifest_file.write("os=" + str(self.os.value) + "\n")

        # Write parameter attributes
        # TODO: Implement

        # Write footer attributes
        manifest_file.write("privacy=" + str(self.privacy.value) + "\n")
        manifest_file.write("publicationDate=" + self._publication_date() + "\n")
        manifest_file.write("quality=" + str(self.quality.value) + "\n")
        manifest_file.write("taskDoc=" + self.documentation + "\n")
        manifest_file.write("taskType=" + self._task_type() + "\n")
        manifest_file.write("userid=" + self.user + "\n")
        manifest_file.write("version=" + self.version_comment + "\n")

        # Close the file
        manifest_file.close()

    def _author_line(self):
        """
        Helper method to concatenate author and institution values, if necessary
        :return: string
        """
        if self.author and self.institution:
            return self.author + ";" + self.institution
        elif self.author:
            return self.author
        else:
            return self.institution

    @staticmethod
    def _publication_date():
        """
        Helper method to return the publication date in the expected format
        :return: string
        """
        return datetime.now().strftime("%m/%d/%Y %H\:%M")

    def _task_type(self):
        """
        Helper method for extracting taskType from the categories list
        :return:
        """
        if self.categories:
            return self.categories[0]
        else:
            return ""

    @staticmethod
    def _escape_colons(string):
        """
        Escape colon characters for inclusion in manifest file
        :param string:
        :return: string
        """
        return string.replace(':', '\:')

    @staticmethod
    def _all_strings(arr):
        if not isinstance([], list):
            raise TypeError("non-list value found where list is expected")
        return all(isinstance(x, str) for x in arr)

    def _valid_lsid(self):
        if not isinstance(self.lsid, str):
            raise TypeError("lsid is not a string, string expected: " + str(self.lsid))

        if self.lsid.count(':') != 5:
            raise ValueError("lsid contains incorrect number of colons, 5 expected: " + str(self.lsid))

        if self.lsid.split(':')[0].lower() != 'urn':
            raise ValueError("lsid does not begin with urn: " + str(self.lsid))
